`timescale 1ns / 1ps
////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:    22:31:11 08/19/24
// Design Name:    
// Module Name:    RegisterFile
// Project Name:   
// Target Device:  
// Tool versions:  
// Description:
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////
module RegisterFile #(
  parameter DataWidth  = 19,                      // 19-bit data width
  parameter NumRegs    = 16,                      // 16 registers
  parameter IndexWidth = 4                        // Manually set to 4 bits to address 16 registers
) (
  input  clk,                                      // Clock input
  input  writeEn,                                  // Write enable
  input  [IndexWidth-1:0] writeAddr,               // Write address
  input  [DataWidth-1:0]  writeData,               // Data to write
  input  [IndexWidth-1:0] readAddr1,               // Read address 1
  input  [IndexWidth-1:0] readAddr2,               // Read address 2
  output [DataWidth-1:0]  readData1,               // Data output 1
  output [DataWidth-1:0]  readData2                // Data output 2
);

  // Register file array with 19-bit width for each register
  reg [DataWidth-1:0] regs [0:NumRegs-1];

  // Write operation on positive clock edge
  always @(posedge clk) begin
    if (writeEn) begin
      regs[writeAddr] <= writeData;
    end
  end

  // Continuous assignments for read operations
  assign readData1 = regs[readAddr1];
  assign readData2 = regs[readAddr2];

endmodule
